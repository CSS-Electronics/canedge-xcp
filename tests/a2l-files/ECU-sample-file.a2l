/* Sanitized A2L file by CSS Electronics */

ASAP2_VERSION  1 60 /* Version 1.60 */

/begin PROJECT
  CSS_SAMPLE_FILE /* project identifier */
  "XCP on CAN Sample File by CSS Electronics" /* long identifier */
 
 /begin HEADER
    "A2L for learning purposes" /* project specific comment */
      VERSION "SAMPLE_FILE_XCP_ON_CAN_V1"
      PROJECT_NO SAMPLE_FILE_1
 /end HEADER 

 /begin MODULE
    SampleECU		    /* name */
    ""                  /* comment */

  /begin A2ML

/***********************************************************/
/*                                                         */
/* ASAP2 meta language for XCP protocol layer V1.2         */
/*                                                         */
/*                                                         */
/*   Datatypes:                                            */
/*                                                         */
/*   A2ML       description                                */
/*   ----------------------------------------------------- */
/*   uchar      unsigned 8  Bit                            */
/*   char       signed 8 Bit                               */
/*   uint       unsigned integer 16 Bit                    */
/*   int        signed integer 16 Bit                      */
/*   ulong      unsigned integer 32 Bit                    */
/*   long       signed integer 32 Bit                      */
/*   float      float 32 Bit IEEE 745                      */
/*                                                         */
/***********************************************************/

/*************** start of PROTOCOL_LAYER *******************/ 
   
  struct Protocol_Layer {     /* At MODULE */ 
   
    uint;                                /* XCP protocol layer version */ 
                                         /* e.g. "1.2" = 0x0102            */ 
   
    uint;                                /* T1 [ms] */ 
    uint;                                /* T2 [ms] */ 
    uint;                                /* T3 [ms] */ 
    uint;                                /* T4 [ms] */ 
    uint;                                /* T5 [ms] */ 
    uint;                                /* T6 [ms] */ 
    uint;                                /* T7 [ms] */ 
   
    uchar;                               /* MAX_CTO */ 
    uint;                                /* MAX_DTO default for DAQ and STIM */ 
   
    enum {                               /* BYTE_ORDER */ 
      "BYTE_ORDER_MSB_LAST"  = 0, 
      "BYTE_ORDER_MSB_FIRST" = 1 
    }; 
   
    enum {                               /* ADDRESS_GRANULARITY */ 
      "ADDRESS_GRANULARITY_BYTE"    = 1, 
      "ADDRESS_GRANULARITY_WORD"    = 2, 
      "ADDRESS_GRANULARITY_DWORD"   = 4 
    }; 
   
    taggedstruct {                       /* optional                     */ 
       
      ("OPTIONAL_CMD" enum {             /* XCP-Code of optional command */  
                                         /* supported by the slave       */ 
   
        "GET_COMM_MODE_INFO"       = 0xFB, 
        "GET_ID"                   = 0xFA, 
        "SET_REQUEST"              = 0xF9, 
        "GET_SEED"                 = 0xF8, 
        "UNLOCK"                   = 0xF7, 
        "SET_MTA"                  = 0xF6, 
        "UPLOAD"                   = 0xF5, 
        "SHORT_UPLOAD"             = 0xF4, 
        "BUILD_CHECKSUM"           = 0xF3, 
        "TRANSPORT_LAYER_CMD"      = 0xF2, 
        "USER_CMD"                 = 0xF1, 
        "DOWNLOAD"                 = 0xF0, 
        "DOWNLOAD_NEXT"            = 0xEF, 
        "DOWNLOAD_MAX"             = 0xEE, 
        "SHORT_DOWNLOAD"           = 0xED, 
        "MODIFY_BITS"              = 0xEC, 
        "SET_CAL_PAGE"             = 0xEB, 
        "GET_CAL_PAGE"             = 0xEA, 
        "GET_PAG_PROCESSOR_INFO"   = 0xE9, 
        "GET_SEGMENT_INFO"         = 0xE8, 
        "GET_PAGE_INFO"            = 0xE7, 
        "SET_SEGMENT_MODE"         = 0xE6, 
        "GET_SEGMENT_MODE"         = 0xE5, 
        "COPY_CAL_PAGE"            = 0xE4, 
        "CLEAR_DAQ_LIST"           = 0xE3, 
        "SET_DAQ_PTR"              = 0xE2, 
        "WRITE_DAQ"                = 0xE1, 
        "SET_DAQ_LIST_MODE"        = 0xE0, 
        "GET_DAQ_LIST_MODE"        = 0xDF, 
        "START_STOP_DAQ_LIST"      = 0xDE, 
        "START_STOP_SYNCH"         = 0xDD, 
        "GET_DAQ_CLOCK"            = 0xDC, 
        "READ_DAQ"                 = 0xDB, 
        "GET_DAQ_PROCESSOR_INFO"   = 0xDA, 
        "GET_DAQ_RESOLUTION_INFO"  = 0xD9, 
        "GET_DAQ_LIST_INFO"        = 0xD8, 
        "GET_DAQ_EVENT_INFO"       = 0xD7, 
        "FREE_DAQ"                 = 0xD6, 
        "ALLOC_DAQ"                = 0xD5, 
        "ALLOC_ODT"                = 0xD4, 
        "ALLOC_ODT_ENTRY"          = 0xD3, 
        "PROGRAM_START"            = 0xD2, 
        "PROGRAM_CLEAR"            = 0xD1, 
        "PROGRAM"                  = 0xD0, 
        "PROGRAM_RESET"            = 0xCF, 
        "GET_PGM_PROCESSOR_INFO"   = 0xCE, 
        "GET_SECTOR_INFO"          = 0xCD, 
        "PROGRAM_PREPARE"          = 0xCC, 
        "PROGRAM_FORMAT"           = 0xCB, 
        "PROGRAM_NEXT"             = 0xCA, 
        "PROGRAM_MAX"              = 0xC9, 
        "PROGRAM_VERIFY"           = 0xC8,
        "WRITE_DAQ_MULTIPLE"       = 0xC7
      })*;           
                                          
      "COMMUNICATION_MODE_SUPPORTED" taggedunion { /* optional modes supported */ 
         "BLOCK" taggedstruct { 
            "SLAVE";                  /* Slave Block Mode supported  */ 
            "MASTER" struct {         /* Master Block Mode supported */ 
               uchar;  /* MAX_BS */ 
               uchar;  /* MIN_ST */ 
            }; 
         }; 
         "INTERLEAVED" uchar;    /* QUEUE_SIZE */  
      }; 
   
      "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];  /* Name of the Seed&Key function */ 
                                                   /* including file extension      */ 
                                                   /* without path                  */ 
      "MAX_DTO_STIM" uint;     /* overrules MAX_DTO see above for STIM use case */                                           
    }; 
   
  };

/***************** end of PROTOCOL_LAYER *******************/ 


/*********************** start of DAQ **********************/ 

  struct Daq {                         /* DAQ supported, at MODULE*/ 
    enum {                             /* DAQ_CONFIG_TYPE */ 
      "STATIC"  = 0, 
      "DYNAMIC" = 1 
    }; 
   
    uint;                               /* MAX_DAQ */ 
    uint;                               /* MAX_EVENT_CHANNEL */ 
    uchar;                              /* MIN_DAQ */ 
   
    enum {                            /* OPTIMISATION_TYPE */ 
      "OPTIMISATION_TYPE_DEFAULT"            = 0, 
      "OPTIMISATION_TYPE_ODT_TYPE_16"        = 1, 
      "OPTIMISATION_TYPE_ODT_TYPE_32"        = 2, 
      "OPTIMISATION_TYPE_ODT_TYPE_64"        = 3, 
      "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4, 
      "OPTIMISATION_TYPE_MAX_ENTRY_SIZE"     = 5 
    }; 
   
    enum {                           /* ADDRESS_EXTENSION */ 
      "ADDRESS_EXTENSION_FREE" = 0, 
      "ADDRESS_EXTENSION_ODT"  = 1, 
      "ADDRESS_EXTENSION_DAQ"  = 3 
    }; 
   
   
    enum {                           /* IDENTIFICATION_FIELD */ 
      "IDENTIFICATION_FIELD_TYPE_ABSOLUTE"              = 0, 
      "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE"         = 1, 
      "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD"         = 2, 
      "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3 
    }; 
     
   
    enum {                        /* GRANULARITY_ODT_ENTRY_SIZE_DAQ */ 
      "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE"    = 1, 
      "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD"    = 2, 
      "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD"   = 4, 
      "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG"   = 8 
    }; 
   
    uchar;                              /* MAX_ODT_ENTRY_SIZE_DAQ */ 
   
    enum {                              /* OVERLOAD_INDICATION */ 
      "NO_OVERLOAD_INDICATION"    = 0, 
      "OVERLOAD_INDICATION_PID"   = 1, 
      "OVERLOAD_INDICATION_EVENT" = 2 
    }; 
   
    taggedstruct {                      /* optional */ 
      "DAQ_ALTERNATING_SUPPORTED" uint; /* Display_Event_Channel_Number */
      "PRESCALER_SUPPORTED"; 
      "RESUME_SUPPORTED"; 
      "STORE_DAQ_SUPPORTED";
   
      block "STIM" struct {             /* STIM supported */ 
   
        enum {                      /* GRANULARITY_ODT_ENTRY_SIZE_STIM */ 
          "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE"   = 1, 
          "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD"   = 2, 
          "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD"  = 4, 
          "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG"  = 8 
        }; 
   
        uchar;                          /* MAX_ODT_ENTRY_SIZE_STIM */ 
   
        taggedstruct {                  /* bitwise stimulation */ 
          "BIT_STIM_SUPPORTED"; 
          "MIN_ST_STIM" uchar; /* separation time between DTOs */
          /* time in units of 100 microseconds */
        }; 
      }; 
             
      block "TIMESTAMP_SUPPORTED" struct {  
        uint;                           /* TIMESTAMP_TICKS */ 
        enum { /* TIMESTAMP_SIZE */ 
          "NO_TIME_STAMP" = 0, 
          "SIZE_BYTE"     = 1, 
          "SIZE_WORD"     = 2, 
          "SIZE_DWORD"    = 4 
        }; 
        enum { /* RESOLUTION OF TIMESTAMP */ 
          "UNIT_1NS"   = 0, 
          "UNIT_10NS"  = 1, 
          "UNIT_100NS" = 2, 
          "UNIT_1US"   = 3, 
          "UNIT_10US"  = 4, 
          "UNIT_100US" = 5, 
          "UNIT_1MS"   = 6, 
          "UNIT_10MS"  = 7, 
          "UNIT_100MS" = 8, 
          "UNIT_1S"    = 9, 
          "UNIT_1PS"   = 10,
          "UNIT_10PS"  = 11,
          "UNIT_100PS" = 12
        }; 
        taggedstruct { 
          "TIMESTAMP_FIXED"; 
        }; 
      }; 
   
      "PID_OFF_SUPPORTED";
  
      "MAX_DAQ_TOTAL" uint;
      "MAX_ODT_TOTAL" uint;
      "MAX_ODT_DAQ_TOTAL" uint;
      "MAX_ODT_STIM_TOTAL" uint;
      "MAX_ODT_ENTRIES_TOTAL" uint;
	  "MAX_ODT_ENTRIES_DAQ_TOTAL" uint;
      "MAX_ODT_ENTRIES_STIM_TOTAL" uint;

      
      "CPU_LOAD_MAX_TOTAL" float;
      
      block "DAQ_MEMORY_CONSUMPTION" struct {
        ulong; /* "DAQ_MEMORY_LIMIT"		: in Elements[AG] */
        uint;  /* "DAQ_SIZE" 			: Anzahl Elements[AG] pro DAQ-Liste */
        uint;  /* "ODT_SIZE" 			: Anzahl Elements[AG] pro ODT */
        uint;  /* "ODT_ENTRY_SIZE" 		: Anzahl Elements[AG] pro ODT_Entry */
        uint;  /* "ODT_DAQ_BUFFER_ELEMENT_SIZE" : Anzahl Payload-Elements[AG]*Faktor = sizeof(Sendepuffer)[AG] */
        uint;  /* "ODT_STIM_BUFFER_ELEMENT_SIZE": Anzahl Payload-Elements[AG]*Faktor = sizeof(Empfangspuffer)[AG] */
      };
       
      /************************ start of DAQ_LIST *************************/ 
   
      (block "DAQ_LIST" struct {          /* DAQ_LIST                    */ 
                                          /* multiple possible           */ 
        uint;                             /* DAQ_LIST_NUMBER             */ 
        taggedstruct {                            /* optional */ 
          "DAQ_LIST_TYPE" enum {               
            "DAQ"      = 1,               /* DIRECTION = DAQ only     */ 
            "STIM"     = 2,               /* DIRECTION = STIM only    */ 
            "DAQ_STIM" = 3                /* both directions possible */ 
                                          /* but not simultaneously   */ 
          }; 
   
          "MAX_ODT"         uchar;        /* MAX_ODT         */ 
          "MAX_ODT_ENTRIES" uchar;        /* MAX_ODT_ENTRIES */ 
   
          "FIRST_PID" uchar;              /* FIRST_PID for this DAQ_LIST */ 
          "EVENT_FIXED" uint;             /* this DAQ_LIST always        */ 
                                          /* in this event               */ 
          block "PREDEFINED" taggedstruct { /* predefined                */ 
                                            /* not configurable DAQ_LIST */ 
             (block "ODT" struct { 
                     uchar;                   /* ODT number */ 
                     taggedstruct { 
                         ("ODT_ENTRY" struct { 
                                     uchar;   /* ODT_ENTRY number            */ 
                                     ulong;   /* address of element                 */ 
                                     uchar;   /* address extension of element */ 
                                     uchar;   /* size of element [AG]                */ 
                                     uchar;   /* BIT_OFFSET                          */ 
                           })*; 
                     }; /* end of ODT_ENTRY */ 
              })*; /* end of ODT */ 
           }; /* end of PREDEFINED */ 
        }; 
      
      })*;
      
      /********************* end of DAQ_LIST ***************************/ 
   
      /************************* start of EVENT ************************/ 
     
      (block "EVENT" struct {             /* EVENT               */ 
                                          /* multiple possible   */ 
        char[101];                        /* EVENT_CHANNEL_NAME       */ 
        char[9];                          /* EVENT_CHANNEL_SHORT_NAME */ 
        uint;                             /* EVENT_CHANNEL_NUMBER     */ 
     
        enum { 
          "DAQ"      = 1,                 /* only DAQ_LISTs         */ 
                                          /* with DIRECTION = DAQ   */ 
          "STIM"     = 2,                 /* only DAQ_LISTs         */ 
                                          /* with DIRECTION = STIM  */ 
          "DAQ_STIM" = 3                  /* both kind of DAQ_LISTs */ 
        }; 
     
        uchar;                            /* MAX_DAQ_LIST */ 
        uchar;                            /* EVENT_CHANNEL_TIME_CYCLE */
        uchar;                            /* EVENT_CHANNEL_TIME_UNIT */ 
        uchar;                            /* EVENT_CHANNEL_PRIORITY */ 
          taggedstruct { /* optional */
            
            "COMPLEMENTARY_BYPASS_EVENT_CHANNEL_NUMBER" uint;
            "CONSISTENCY" enum {
  
                 "DAQ" = 0,
                 "EVENT" = 1
            };
           
            block "MIN_CYCLE_TIME" struct { /* Configuration with 0-0 not allowed */
             uchar;                            /* EVENT_CHANNEL_TIME_CYCLE */
             uchar;                            /* EVENT_CHANNEL_TIME_UNIT  */
            };
           
           "CPU_LOAD_MAX" float;
          
           block "CPU_LOAD_CONSUMPTION_DAQ" struct {
            float;  // "DAQ_FACTOR"
            float;  // "ODT_FACTOR"
            float;  // "ODT_ENTRY_FACTOR" 
            taggedstruct { 
              (block "ODT_ENTRY_SIZE_FACTOR_TABLE" struct{// Kopierroutine
                     uint; //"SIZE" 
                     float; // "SIZE_FACTOR" 
               })*;
             };
           };
           
           block "CPU_LOAD_CONSUMPTION_STIM" struct {
            float;  // "DAQ_FACTOR"
            float;  // "ODT_FACTOR"
            float;  // "ODT_ENTRY_FACTOR" 
            taggedstruct { 
              (block "ODT_ENTRY_SIZE_FACTOR_TABLE" struct{// Kopierroutine
                     uint; //"SIZE" 
                     float; //"SIZE_FACTOR" 
               })*;
             };
           };
           
           block "CPU_LOAD_CONSUMPTION_QUEUE" struct {
              float;  // "ODT_FACTOR" 
              float;  // "ODT_ELEMENT_LOAD",length in elements[AG]
           };        
         };
      })*;
      
      /******************** end of EVENT *********************/ 
   
    }; /* end of optional at DAQ */ 
   
  }; 
  
/********************* end of DAQ **************************/  
  

/***************** start of DAQ_EVENT **********************/ 
 
  taggedunion Daq_Event {         /* at MEASUREMENT */ 
     "FIXED_EVENT_LIST" taggedstruct { 
        ("EVENT" uint)* ; 
     }; 
     "VARIABLE" taggedstruct { 
        block "AVAILABLE_EVENT_LIST" taggedstruct { 
           ("EVENT" uint)*; 
        }; 
        block "DEFAULT_EVENT_LIST" taggedstruct { 
           ("EVENT" uint)*; 
        }; 
     }; 
  }; 

/******************** end of DAQ_EVENT *********************/ 
   

/*********************** start of PAG **********************/ 
   
  struct Pag {                  /* PAG supported, at MODULE */ 
    uchar;                      /* MAX_SEGMENTS */ 
    taggedstruct {              /* optional */ 
      "FREEZE_SUPPORTED"; 
    }; 
   
  }; 

/*********************** end of PAG ************************/ 
      

/*********************** start of PGM **********************/ 
   
  struct Pgm {                  /* PGM supported, at MODULE */ 
   
    enum { 
      "PGM_MODE_ABSOLUTE"                = 1, 
      "PGM_MODE_FUNCTIONAL"              = 2, 
      "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3 
    }; 
    uchar;                               /* MAX_SECTORS */ 
    uchar;                               /* MAX_CTO_PGM */ 
  
    taggedstruct {                       /* optional                */ 
      (block "SECTOR" struct {           /* SECTOR                  */ 
                                         /* multiple possible       */ 
        char[101];                       /* SECTOR_NAME             */ 
        uchar;                           /* SECTOR_NUMBER           */ 
        ulong;                           /* Address                 */ 
        ulong;                           /* Length                  */ 
        uchar;                           /* CLEAR_SEQUENCE_NUMBER   */ 
        uchar;                           /* PROGRAM_SEQUENCE_NUMBER */ 
        uchar;                           /* PROGRAM_METHOD          */ 
      })*; /* end of SECTOR */ 
                                          
      "COMMUNICATION_MODE_SUPPORTED" taggedunion { /* optional modes supported */ 
         "BLOCK" taggedstruct { 
            "SLAVE";                  /* Slave Block Mode supported  */ 
            "MASTER" struct {         /* Master Block Mode supported */ 
               uchar;  /* MAX_BS_PGM */ 
               uchar;  /* MIN_ST_PGM */ 
            }; 
         }; 
       "INTERLEAVED" uchar;    /* QUEUE_SIZE_PGM */  
       }; 
    }; 
  }; 

/*********************** end of PGM ************************/ 

  
/*********************** start of SEGMENT ******************/ 
   
  struct Segment {               /* at MEMORY_SEGMENT */ 
    uchar;                               /* SEGMENT_NUMBER     */ 
    uchar;                               /* number of pages    */ 
    uchar;                               /* ADDRESS_EXTENSION  */ 
    uchar;                               /* COMPRESSION_METHOD */ 
    uchar;                               /* ENCRYPTION_METHOD  */ 
   
    taggedstruct {                       /* optional           */ 
      block "CHECKSUM" struct { 
        enum {                           /* checksum type      */ 
          "XCP_ADD_11"       =   1, 
          "XCP_ADD_12"       =   2, 
          "XCP_ADD_14"       =   3, 
          "XCP_ADD_22"       =   4, 
          "XCP_ADD_24"       =   5, 
          "XCP_ADD_44"       =   6, 
          "XCP_CRC_16"       =   7, 
          "XCP_CRC_16_CITT"  =   8, 
          "XCP_CRC_32"       =   9, 
          "XCP_USER_DEFINED" = 255 
        }; 
   
        taggedstruct { 
          "MAX_BLOCK_SIZE"              ulong ;    /* maximum block size            */ 
                                                   /* for checksum calculation      */ 
          "EXTERNAL_FUNCTION" char[256];           /* Name of the Checksum function */ 
                                                   /* including file extension      */ 
                                                   /* without path                  */ 
        }; 
      }; 
   
      (block "PAGE" struct {               /* PAGES for this SEGMENT */ 
                                           /* multiple possible      */ 
        uchar;                             /* PAGE_NUMBER            */ 
   
        enum {            /* ECU_ACCESS_TYPE */ 
            "ECU_ACCESS_NOT_ALLOWED"      = 0, 
            "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1, 
            "ECU_ACCESS_WITH_XCP_ONLY"    = 2, 
            "ECU_ACCESS_DONT_CARE"        = 3 
         }; 
   
        enum {       /* XCP_READ_ACCESS_TYPE */ 
            "XCP_READ_ACCESS_NOT_ALLOWED"      = 0, 
            "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1, 
            "XCP_READ_ACCESS_WITH_ECU_ONLY"    = 2, 
            "XCP_READ_ACCESS_DONT_CARE"        = 3 
         }; 
   
        enum {      /* XCP_WRITE_ACCESS_TYPE */ 
            "XCP_WRITE_ACCESS_NOT_ALLOWED"      = 0, 
            "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1, 
            "XCP_WRITE_ACCESS_WITH_ECU_ONLY"    = 2, 
            "XCP_WRITE_ACCESS_DONT_CARE"        = 3 
        }; 
        taggedstruct { 
          "INIT_SEGMENT" uchar; /* references segment that initialises this page */ 
        }; 
   
      })*; /* end of PAGE */                 
   
      (block "ADDRESS_MAPPING" struct {  /* multiple possible   */ 
                           ulong;        /* source address      */ 
                           ulong;        /* destination address */ 
                           ulong;        /* length              */ 
      })*; 
   
      "PGM_VERIFY" ulong; /* verification value for PGM */ 
    }; /* end of optional */ 
   
  }; 

/************************ end of SEGMENT *******************/ 

  
/*********************** start of Common Parameters ********/ 
 
  taggedstruct Common_Parameters {  
   
    block "PROTOCOL_LAYER" struct Protocol_Layer; 
   
    block "SEGMENT" struct Segment; 
   
    block "DAQ" struct Daq; 
    block "PAG" struct Pag; 
    block "PGM" struct Pgm; 
   
    block "DAQ_EVENT" taggedunion Daq_Event; 
   
  }; 

/********************** end of Common Parameters **********/ 


/***********************************************************/
/*                                                         */
/* ASAP2 meta language for XCP on CAN V1.2                 */
/*                                                         */
/*                                                         */
/*   Datatypes:                                            */
/*                                                         */
/*   A2ML       description                                */
/*   ----------------------------------------------------- */
/*   uchar      unsigned 8  Bit                            */
/*   char       signed 8 Bit                               */
/*   uint       unsigned integer 16 Bit                    */
/*   int        signed integer 16 Bit                      */
/*   ulong      unsigned integer 32 Bit                    */
/*   long       signed integer 32 Bit                      */
/*   float      float 32 Bit IEEE 745                      */
/*                                                         */
/***********************************************************/
/************************ start of CAN *********************/

  struct CAN_Parameters { /* At MODULE */
    uint; /* XCP on CAN version */
          /* e.g. "1.2" = 0x0102 */
    taggedstruct { /* optional */
      "CAN_ID_BROADCAST" ulong; /* Auto detection CAN-ID */
                                /* master -> slaves */
                                /* Bit31= 1: extended identifier */
      "CAN_ID_MASTER" ulong;    /* CMD/STIM CAN-ID */
                                /* master -> slave */
                                /* Bit31= 1: extended identifier */
      "CAN_ID_MASTER_INCREMENTAL";     /* master uses range of CAN-IDs  */
                                /* start of range = CAN_ID_MASTER */
                                /* end of range = CAN_ID_MASTER+MAX_BS(_PGM)-1 */
      "CAN_ID_SLAVE" ulong;     /* RES/ERR/EV/SERV/DAQ CAN-ID */
                                /* slave -> master */
                                /* Bit31= 1: extended identifier */
      "BAUDRATE" ulong;         /* BAUDRATE [Hz] */
      "SAMPLE_POINT" uchar;     /* sample point */
                                /* [% complete bit time] */
      "SAMPLE_RATE" enum {
        "SINGLE" = 1,           /* 1 sample per bit */
        "TRIPLE" = 3            /* 3 samples per bit */
      };
      "BTL_CYCLES" uchar;       /* BTL_CYCLES */
                                /* [slots per bit time] */
      "SJW" uchar;              /* length synchr. segment */
                                /* [BTL_CYCLES] */
      "SYNC_EDGE" enum {
        "SINGLE" = 1,           /* on falling edge only */
        "DUAL" = 2              /* on falling and rising edge */
      };
      "MAX_DLC_REQUIRED";       /* master to slave frames */
                                /* always to have DLC = MAX_DLC = 8 */
                              
      (block "DAQ_LIST_CAN_ID" struct { /* At IF_DATA DAQ */
        uint;                   /* reference to DAQ_LIST_NUMBER */
        taggedstruct {          /* exclusive tags */
                                /* either VARIABLE or FIXED */
          "VARIABLE";
          "FIXED" ulong;        /* this DAQ_LIST always */
                                /* on this CAN_ID */
        };
      })*;
      (block "EVENT_CAN_ID_LIST" struct { /* At IF_DATA DAQ  */
        uint;                   /* reference to EVENT_NUMBER */
        taggedstruct {          /* exclusive tags */
          ("FIXED" ulong)*;        /* this Event always on this ID */
        };
      })*;
        
      "MAX_BUS_LOAD"  ulong;    /* maximum available bus */
                                   /* load in percent */
  
      block "CAN_FD" struct {
        taggedstruct {

          "MAX_DLC" uint; /* 8, 12, 16, 20, 24, 32, 48 or 64 */
          "CAN_FD_DATA_TRANSFER_BAUDRATE" ulong; /* BAUDRATE [Hz] */
 
          "SAMPLE_POINT" uchar;   /* sample point receiver*/
                                      /* [% complete bit time] */
        
          "BTL_CYCLES" uchar;            /* BTL_CYCLES        */
                                     /* [slots per bit time]   */
          "SJW" uchar;              /* length synchr. segment */
                                     /* [BTL_CYCLES]           */
          "SYNC_EDGE" enum {
                       "SINGLE" = 1, /* on falling edge only */
                       "DUAL"   = 2  /* on falling and rising edge*/
                     };
  
          "MAX_DLC_REQUIRED";      /* master to slave frames */
                         /* always to have DLC = MAX_DLC_for CAN-FD */
  
          "SECONDARY_SAMPLE_POINT" uchar;/* sender sample point */
                                     /* [% complete bit time] */
          "TRANSCEIVER_DELAY_COMPENSATION" enum {
                         "OFF" = 0,
                         "ON" = 1
          };
                       
        };
        
      };
      
    };
    
  };

/************************* end of CAN **********************/


/************* start of XCP on different Transport Layers *******************/

block "IF_DATA" taggedunion if_data {
 "XCPplus" struct {
    uint;
    taggedstruct Common_Parameters ; /* default parameters */
  
    taggedstruct { /* transport layer specific parameters  */
                   /* overruling of the default parameters */
  
      (block "XCP_ON_CAN" struct {
  
        struct CAN_Parameters ;                   /* specific for CAN      */
        taggedstruct Common_Parameters;           /* overruling of default */
        taggedstruct {
          "TRANSPORT_LAYER_INSTANCE" char[101];
        };   
  
      })*;
  
    };
  
  };
};
  
/************* end of XCP on different Transport Layers ********************/



  /end A2ML


  /begin MOD_COMMON   
    "" /* comment */
    BYTE_ORDER MSB_LAST
    ALIGNMENT_FLOAT64_IEEE 4
  /end MOD_COMMON 


  /********** IF_DATA ASAP1B_XCP *************************/
    

/begin IF_DATA XCPplus 0x0102

  /begin PROTOCOL_LAYER

    0x0102                      /* XCP version */

    0x0019                      /* T1 */
    0x0019                      /* T2 */
    0x0019                      /* T3 */
    0x0019                      /* T4 */
    0x0019                      /* T5 */
    0x0005                      /* T6 */
    0x00C8                      /* T7 */
    
    0x08                        /* MAX_CTO */
    0x00FA                      /* MAX_DTO */

    BYTE_ORDER_MSB_LAST
    ADDRESS_GRANULARITY_BYTE

    OPTIONAL_CMD  GET_ID        /* optional commands */ 
    OPTIONAL_CMD  SET_MTA
    OPTIONAL_CMD  UPLOAD
    OPTIONAL_CMD  BUILD_CHECKSUM
    OPTIONAL_CMD  DOWNLOAD
    OPTIONAL_CMD  SET_DAQ_PTR
    OPTIONAL_CMD  WRITE_DAQ
    OPTIONAL_CMD  WRITE_DAQ_MULTIPLE
    OPTIONAL_CMD  SET_DAQ_LIST_MODE
    OPTIONAL_CMD  GET_DAQ_LIST_MODE
    OPTIONAL_CMD  START_STOP_DAQ_LIST
    OPTIONAL_CMD  START_STOP_SYNCH
    OPTIONAL_CMD  GET_DAQ_CLOCK
    OPTIONAL_CMD  FREE_DAQ
    OPTIONAL_CMD  ALLOC_DAQ
    OPTIONAL_CMD  ALLOC_ODT
    OPTIONAL_CMD  ALLOC_ODT_ENTRY
    OPTIONAL_CMD GET_SEED    	
    OPTIONAL_CMD UNLOCK    	

  /end PROTOCOL_LAYER


  /begin DAQ

    DYNAMIC                     /* DAQ config. type */

    0x0                         /* MAX_DAQ */
    0x23     					/* MAX_EVENT_CHANNEL */
    0x0                         /* MIN_DAQ */

    OPTIMISATION_TYPE_ODT_TYPE_32
    ADDRESS_EXTENSION_FREE
    IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED
    
    GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE
    0xf6                        /* MAX_ODT_ENTRY_SIZE_DAQ */

    OVERLOAD_INDICATION_EVENT

    PRESCALER_SUPPORTED

    /begin TIMESTAMP_SUPPORTED
      0x0001                    /* TIMESTAMP_TICKS */ 
      SIZE_DWORD
      UNIT_1US
      TIMESTAMP_FIXED
    /end TIMESTAMP_SUPPORTED
 

    
    /* xcp events */

    /begin EVENT
      "c_MT_Default_Task_500us"
      "MT_500us"
      9      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      5        /* time cycle */
      5        /* time unit */
      141      /* event priority */
    /end EVENT

    /begin EVENT
      "c_MT_Default_Task_1ms"
      "MT_1ms"
      1      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      1        /* time cycle */
      6        /* time unit */
      140      /* event priority */
    /end EVENT

    /begin EVENT
      "c_MT_Default_Task_x1"
      "MT_x1"
      2      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      5        /* time cycle */
      6        /* time unit */
      139      /* event priority */
    /end EVENT

    /begin EVENT
      "c_MT_Default_Task_x2"
      "MT_x2"
      3      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      1        /* time cycle */
      7        /* time unit */
      138      /* event priority */
    /end EVENT

    /begin EVENT
      "c_MT_Default_Task_x4"
      "MT_x4"
      4      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      2        /* time cycle */
      7        /* time unit */
      137      /* event priority */
    /end EVENT

    /begin EVENT
      "c_MT_Default_Task_x8"
      "MT_x8"
      5      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      4        /* time cycle */
      7        /* time unit */
      136      /* event priority */
    /end EVENT

    /begin EVENT
      "c_MT_Default_Task_x24"
      "MT_x24"
      6      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      12        /* time cycle */
      7        /* time unit */
      135      /* event priority */
    /end EVENT

    /begin EVENT
      "c_StartupAsyncDebug"
      "StAsyDbug"
      7      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      0        /* time cycle */
      6        /* time unit */
      134      /* event priority */
    /end EVENT

    /begin EVENT
      "c_ProcessSwitchAsync"
      "PrcSwiAsy"
      8      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      0        /* time cycle */
      0        /* time unit */
      133      /* event priority */
    /end EVENT




  /end DAQ    



/************************ start of CAN *********************/
  /begin XCP_ON_CAN
     0x0102                                                /* XCP on CAN version */
    CAN_ID_MASTER 0x40000111                                   /* CMD/STIM CAN-ID */
                                                          /* master -> slave */
    CAN_ID_SLAVE 0x40000222                                    /* RES/ERR/EV/SERV/DAQ CAN-ID */
                                                          /* slave -> master */
                                                          /* Bit31= 1: extended identifier */
    BAUDRATE 500000                                      /* BAUDRATE [Hz] */
    SAMPLE_POINT 80                                       /* sample point */
                                                          /* [% complete bit time] */
    BTL_CYCLES 80                                         /* BTL_CYCLES */
                                                          /* [slots per bit time] */
    SJW 16                                                 /* length synchr. segment */
                                                          /* [BTL_CYCLES] */
    /begin CAN_FD
      MAX_DLC       64          /* 8, 12, 16, 20, 24, 32, 48 or 64 */
      CAN_FD_DATA_TRANSFER_BAUDRATE  2000000 /* BAUDRATE [Hz] */
      SAMPLE_POINT  80          /* sample point receiver*/
                                /* [% complete bit time] */
      BTL_CYCLES    20          /* BTL_CYCLES        */
                                /* [slots per bit time]   */
      SJW           4           /* length synchr. segment */
                                /* [BTL_CYCLES]           */
    /end CAN_FD


  /begin PROTOCOL_LAYER

    0x0102                      /* XCP version */

    0x000A                      /* T1 */
    0x000A                      /* T2 */
    0x000A                      /* T3 */
    0x000A                      /* T4 */
    0x000A                      /* T5 */
    0x0000                      /* T6 */
    0x0020                      /* T7 */
    
    0x40                        /* MAX_CTO */
    0x0040                      /* MAX_DTO */

    BYTE_ORDER_MSB_LAST
    ADDRESS_GRANULARITY_BYTE

    OPTIONAL_CMD  GET_ID        /* optional commands */ 
    OPTIONAL_CMD  SET_MTA
    OPTIONAL_CMD  UPLOAD
    OPTIONAL_CMD  BUILD_CHECKSUM
    OPTIONAL_CMD  DOWNLOAD
    OPTIONAL_CMD  SET_DAQ_PTR
    OPTIONAL_CMD  WRITE_DAQ
    OPTIONAL_CMD  WRITE_DAQ_MULTIPLE
    OPTIONAL_CMD  SET_DAQ_LIST_MODE
    OPTIONAL_CMD  GET_DAQ_LIST_MODE
    OPTIONAL_CMD  START_STOP_DAQ_LIST
    OPTIONAL_CMD  START_STOP_SYNCH
    OPTIONAL_CMD  GET_DAQ_CLOCK
    OPTIONAL_CMD  FREE_DAQ
    OPTIONAL_CMD  ALLOC_DAQ
    OPTIONAL_CMD  ALLOC_ODT
    OPTIONAL_CMD  ALLOC_ODT_ENTRY
    OPTIONAL_CMD GET_SEED    	
    OPTIONAL_CMD UNLOCK    	

      SEED_AND_KEY_EXTERNAL_FUNCTION  "myseedandkeyfunct.dll"    	

  /end PROTOCOL_LAYER

  /begin DAQ

    DYNAMIC                     /* DAQ config. type */

    0x0                         /* MAX_DAQ */
    0x23     					/* MAX_EVENT_CHANNEL */
    0x0                         /* MIN_DAQ */

    OPTIMISATION_TYPE_DEFAULT
    ADDRESS_EXTENSION_FREE
    IDENTIFICATION_FIELD_TYPE_ABSOLUTE
    
    GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE
    0x3F                        /* MAX_ODT_ENTRY_SIZE_DAQ */

    OVERLOAD_INDICATION_EVENT

    PRESCALER_SUPPORTED

 
    
    /* xcp events */


    /begin EVENT
      "c_MT_Default_Task_x1"
      "MTTaskx1"
      2      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      5        /* time cycle */
      6        /* time unit */
      139      /* event priority */
    /end EVENT

    /begin EVENT
      "c_MT_Default_Task_x2"
      "MTTaskx2"
      3      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      1        /* time cycle */
      7        /* time unit */
      138      /* event priority */
    /end EVENT

    /begin EVENT
      "c_MT_Default_Task_x4"
      "MTTaskx4"
      4      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      2        /* time cycle */
      7        /* time unit */
      137      /* event priority */
    /end EVENT

    /begin EVENT
      "c_MT_Default_Task_x8"
      "MTTaskx8"
      5      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      4        /* time cycle */
      7        /* time unit */
      136      /* event priority */
    /end EVENT

    /begin EVENT
      "c_MT_Default_Task_x24"
      "MTTaskx24"
      6      /* event channel number */
      DAQ      /* event direction */
      1        /* max. DAQ list */
      12        /* time cycle */
      7        /* time unit */
      135      /* event priority */
    /end EVENT


  /end DAQ    


    TRANSPORT_LAYER_INSTANCE "CAN"
  /end XCP_ON_CAN
  /************************* end of CAN **********************/

/end IF_DATA

  /********** MEASUREMENT ********************************/



    /begin MEASUREMENT
      SpeedSignal
      "Description of SpeedSignal"
      ULONG
      COMPU_METHOD_1
      1
      0
      0
      255
      ECU_ADDRESS  0xFACD01A2
      SYMBOL_LINK "SYMBOL_LINK_1" 0
      /begin IF_DATA XCPplus 0x0102
        /begin DAQ_EVENT VARIABLE
          /begin AVAILABLE_EVENT_LIST
            EVENT 2
          /end AVAILABLE_EVENT_LIST
          /begin DEFAULT_EVENT_LIST
            EVENT 2
          /end DEFAULT_EVENT_LIST
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT
      AccelerationSignal
      "Description of AccelerationSignal"
      SWORD
      COMPU_METHOD_2
      1
      0
      -40.9609375
      40.958984375
      ECU_ADDRESS  0xFACD03A5
    /end MEASUREMENT

    /begin MEASUREMENT
      VelocitySignal
      "Description of VelocitySignal"
      SWORD
      COMPU_METHOD_3
      1
      0
      -250
      250
      ECU_ADDRESS  0xFACA06A7
    /end MEASUREMENT

    /begin MEASUREMENT
      TemperatureSignal
      "Description of TemperatureSignal"
      SWORD
      COMPU_METHOD_3
      1
      0
      -25
      25
      ECU_ADDRESS  0xFACD11B2
      /begin IF_DATA XCPplus 0x0102
        /begin DAQ_EVENT VARIABLE
          /begin AVAILABLE_EVENT_LIST
            EVENT 2
          /end AVAILABLE_EVENT_LIST
          /begin DEFAULT_EVENT_LIST
            EVENT 2
          /end DEFAULT_EVENT_LIST
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT
	
    /begin MEASUREMENT
      SignalQuality
      "Description of SignalQuality"
      UBYTE
      COMPU_METHOD_4
      1
      0
      0
      3
      ECU_ADDRESS  0xFACD41C1
      /begin IF_DATA XCPplus 0x0102
        /begin DAQ_EVENT VARIABLE
          /begin AVAILABLE_EVENT_LIST
            EVENT 2
          /end AVAILABLE_EVENT_LIST
          /begin DEFAULT_EVENT_LIST
            EVENT 2
          /end DEFAULT_EVENT_LIST
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT



  /********** COMPU_METHOD *******************************/

    
    /* complex formulas */

    /begin COMPU_METHOD
      COMPU_METHOD_1
      "no comment"
      RAT_FUNC
      "%42.21"
      "-"
      COEFFS 0 16777216 0 0 0 1
    /end COMPU_METHOD

    /begin COMPU_METHOD
      COMPU_METHOD_2
      "no comment"
      RAT_FUNC
      "%42.21"
      "m/s^2"
      COEFFS 0 512 0 0 0 1
    /end COMPU_METHOD

    /begin COMPU_METHOD
      COMPU_METHOD_3
      "no comment"
      RAT_FUNC
      "%42.21"
      "m/s^2"
      COEFFS 0 16 0 0 0 1
    /end COMPU_METHOD
	
	/begin COMPU_METHOD
      COMPU_METHOD_4
      ""
      TAB_VERB
      "%.0"
      ""
      COMPU_TAB_REF ENUM_SignalQuality
    /end COMPU_METHOD

    /* verbal formulas (enums) */

    /begin COMPU_VTAB
      ENUM_SignalQuality
      "This table describes signal quality"
      TAB_VERB
      4
      0 "Inplausible"
      1 "NotAvailable"
      2 "Notreliable"
      3 "Plausible"
    /end COMPU_VTAB


  /********** RECORD_LAYOUT ******************************/

    



  /********** GROUPS *************************************/

    


  /end MODULE

/end PROJECT

